{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satvi\\\\dsansutleaderboard\\\\src\\\\Components\\\\GoogleLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GoogleLogin({\n  onLoginSuccess\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadGoogleScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      document.body.appendChild(script);\n      script.onload = initializeGoogleSignIn;\n      script.onerror = () => setError(\"Failed to load Google Sign-In script\");\n    };\n    loadGoogleScript();\n  }, []);\n  const initializeGoogleSignIn = () => {\n    if (window.google) {\n      try {\n        window.google.accounts.id.initialize({\n          client_id: '903643545169-tp7412gj0knhg9ec8cfvjh0ho1tlqknb.apps.googleusercontent.com',\n          // Replace with your actual Google Client ID\n          callback: handleCredentialResponse\n        });\n        window.google.accounts.id.renderButton(document.getElementById('googleSignInButton'), {\n          theme: 'outline',\n          size: 'large'\n        });\n        window.google.accounts.id.prompt();\n      } catch (error) {\n        console.error(\"Error initializing Google Sign-In:\", error);\n        setError(\"Failed to initialize Google Sign-In\");\n      }\n    } else {\n      console.error(\"Google Sign-In script not loaded\");\n      setError(\"Google Sign-In not available\");\n    }\n  };\n  const handleCredentialResponse = response => {\n    console.log(\"Received credential response:\", response);\n    if (response.credential) {\n      const token = response.credential;\n      // Decode the JWT token\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      const {\n        email,\n        name\n      } = JSON.parse(jsonPayload);\n      if (email.endsWith('@nsut.ac.in')) {\n        onLoginSuccess({\n          email,\n          name\n        });\n        navigate('/profile');\n      } else {\n        setError('Please use your NSUT email to login.');\n      }\n    } else {\n      console.error(\"No credential received in response\");\n      setError(\"Login failed. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"googleSignInButton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleLogin, \"rvGNk9RpusFBHILvEh7HEBKA/WQ=\", false, function () {\n  return [useNavigate];\n});\n_c = GoogleLogin;\nexport default GoogleLogin;\nvar _c;\n$RefreshReg$(_c, \"GoogleLogin\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","GoogleLogin","onLoginSuccess","_s","navigate","error","setError","loadGoogleScript","script","document","createElement","src","async","defer","body","appendChild","onload","initializeGoogleSignIn","onerror","window","google","accounts","id","initialize","client_id","callback","handleCredentialResponse","renderButton","getElementById","theme","size","prompt","console","response","log","credential","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","email","name","JSON","parse","endsWith","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/satvi/dsansutleaderboard/src/Components/GoogleLogin.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction GoogleLogin({ onLoginSuccess }) {\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadGoogleScript = () => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://accounts.google.com/gsi/client';\r\n      script.async = true;\r\n      script.defer = true;\r\n      document.body.appendChild(script);\r\n\r\n      script.onload = initializeGoogleSignIn;\r\n      script.onerror = () => setError(\"Failed to load Google Sign-In script\");\r\n    };\r\n\r\n    loadGoogleScript();\r\n  }, []);\r\n\r\n  const initializeGoogleSignIn = () => {\r\n    if (window.google) {\r\n      try {\r\n        window.google.accounts.id.initialize({\r\n          client_id: '903643545169-tp7412gj0knhg9ec8cfvjh0ho1tlqknb.apps.googleusercontent.com', // Replace with your actual Google Client ID\r\n          callback: handleCredentialResponse\r\n        });\r\n        window.google.accounts.id.renderButton(\r\n          document.getElementById('googleSignInButton'),\r\n          { theme: 'outline', size: 'large' }\r\n        );\r\n        window.google.accounts.id.prompt();\r\n      } catch (error) {\r\n        console.error(\"Error initializing Google Sign-In:\", error);\r\n        setError(\"Failed to initialize Google Sign-In\");\r\n      }\r\n    } else {\r\n      console.error(\"Google Sign-In script not loaded\");\r\n      setError(\"Google Sign-In not available\");\r\n    }\r\n  };\r\n\r\n  const handleCredentialResponse = (response) => {\r\n    console.log(\"Received credential response:\", response);\r\n    if (response.credential) {\r\n      const token = response.credential;\r\n      // Decode the JWT token\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      }).join(''));\r\n\r\n      const { email, name } = JSON.parse(jsonPayload);\r\n\r\n      if (email.endsWith('@nsut.ac.in')) {\r\n        onLoginSuccess({ email, name });\r\n        navigate('/profile');\r\n      } else {\r\n        setError('Please use your NSUT email to login.');\r\n      }\r\n    } else {\r\n      console.error(\"No credential received in response\");\r\n      setError(\"Login failed. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"googleSignInButton\"></div>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}